app.py :-

from flask import Flask, render_template, request, redirect, url_for, session
import mysql.connector
import google.generativeai as genai
import os
from werkzeug.utils import secure_filename
from get_file import extract_pdf_text
# Initialize the Gemini API
api_key = "AIzaSyBVtxcbs7jEJaREjyVEqAMdrcIJaRanTOI"
genai.configure(api_key=api_key)
model_pro = genai.GenerativeModel(model_name="gemini-1.5-pro")

app = Flask(__name__)
app.secret_key = 'your_secret_key'

TEMP_DIR = "temp"
UPLOAD_FOLDER = TEMP_DIR
app.config['UPLOAD_FOLDER'] = UPLOAD_FOLDER

db_config = {
    'user': 'root',
    'password': 'vansh',
    'host': 'localhost',
    'database': 'hackathon'
}


def get_locations():
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        cursor.execute("SELECT DISTINCT location FROM tickets")
        locations = [row[0] for row in cursor.fetchall()]
        cursor.close()
        conn.close()
        return locations
    except mysql.connector.Error as e:
        print(f"Database error: {e}")
        return []

def search_locations(search_query):
    try:
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor()
        query = f"SELECT DISTINCT location FROM tickets WHERE location LIKE %s"
        cursor.execute(query, (f"%{search_query}%",))
        locations = [row[0] for row in cursor.fetchall()]
        cursor.close()
        conn.close()
        return locations
    except mysql.connector.Error as e:
        print(f"Database error: {e}")
        return []

def talk_with_data(text, query, model):
    try:
        response = model.generate_content(f"{text} {query}")
        if response.parts:
            raw_response = response.parts[0].text
            formatted_response = convert_markdown_to_html(raw_response)
            return formatted_response
        else:
            feedback = response.prompt_feedback
            if feedback:
                return f"Prompt feedback: {feedback}"
            else:
                return "No response generated. Please try a different query."
    except Exception as e:
        return f"Error: {str(e)}"

def convert_markdown_to_html(text):
    import re
    text = re.sub(r'\*\*(.*?)\*\*', r'<strong>\1</strong>', text)
    text = re.sub(r'\*(.*?)\*', r'<em>\1</em>', text)
    text = re.sub(r'\~\~(.*?)\~\~', r'<del>\1</del>', text)
    text = re.sub(r'\`([^`]*)\`', r'<code>\1</code>', text)
    text = re.sub(r'\n', '<br>', text)
    return text

def talk_with_pdf(pdf_path, query, model):
    try:
        text = extract_pdf_text(pdf_path)
        if text:
            response = talk_with_data(text, query, model)
            return response
        else:
            return "Failed to extract text from the file."
    except Exception as e:
        return f"Error: {str(e)}"

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password =password
        
        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO users (username, password, role) VALUES (%s, %s, %s)", (username, hashed_password, 'user'))
            conn.commit()
            cursor.close()
            conn.close()
            return redirect(url_for('login'))
        except mysql.connector.Error as e:
            return f"An error occurred: {str(e)}"
    
    return render_template('register.html')

@app.route('/', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        hashed_password =password
        
        conn = mysql.connector.connect(**db_config)
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE username = %s AND password = %s", (username, hashed_password))
        user = cursor.fetchone()
        cursor.close()
        conn.close()
        
        if user:
            session['username'] = user['username']
            session['role'] = user['role']
            if user['role'] == 'admin':
                return redirect(url_for('admin_page'))
            else:
                return redirect(url_for('user_page'))
        else:
            return "Invalid credentials. Please try again."
    
    return render_template('login.html')

@app.route('/admin', methods=['GET', 'POST'])
def admin_page():
    if 'username' not in session or session.get('role') != 'admin':
        return redirect(url_for('login'))

    if request.method == 'POST':
        location = request.form.get('location')
        tickets_available = request.form.get('tickets_available')
        pdf = request.files.get('pdf')

        if not location or not tickets_available:
            return "Location and available tickets fields are required."

        try:
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("INSERT INTO tickets (location, pdf_path, tickets_available) VALUES (%s, %s, %s)",
                           (location, pdf.filename if pdf else None, tickets_available))
            conn.commit()
            cursor.close()
            conn.close()
            return "Location added successfully!"
        except mysql.connector.Error as e:
            return f"An error occurred: {str(e)}"

    return render_template('admin.html')

@app.route('/logout')
def logout():
    session.pop('username', None)
    session.pop('role', None)
    return redirect(url_for('login'))

@app.route('/user', methods=['GET', 'POST'])
def user_page():
    if 'username' not in session:
        return redirect(url_for('login'))
    
    if request.method == 'POST':
        search_query = request.form.get('search_query', '')
        locations = search_locations(search_query)
        
        if 'chatbot-input' in request.form:
            query = request.form['chatbot-input']
            location = request.form['location']
            
            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("SELECT pdf_path FROM tickets WHERE location = %s", (location,))
            result = cursor.fetchone()
            cursor.close()
            conn.close()

            if result:
                pdf_path = result[0]
                if pdf_path:
                    response = talk_with_pdf(pdf_path, query, model_pro)
                else:
                    response = "No file associated with the selected location."
            else:
                response = "No data found for the selected location."

            return render_template('user.html', locations=locations, chatbot_response=response)
        
        elif 'tickets' in request.form:
            username = session['username']
            location = request.form['location']
            tickets_requested = int(request.form['tickets'])

            conn = mysql.connector.connect(**db_config)
            cursor = conn.cursor()
            cursor.execute("SELECT tickets_available FROM tickets WHERE location = %s", (location,))
            result = cursor.fetchone()

            if result and result[0] >= tickets_requested:
                new_tickets_available = result[0] - tickets_requested
                cursor.execute("UPDATE tickets SET tickets_available = %s WHERE location = %s", (new_tickets_available, location))
                cursor.execute("INSERT INTO bookings (username, location, tickets_booked) VALUES (%s, %s, %s)",
                               (username, location, tickets_requested))
                conn.commit()
                response = "Tickets booked successfully!"
            else:
                response = "Not enough tickets available."

            cursor.close()
            conn.close()

            return render_template('user.html', locations=locations, booking_response=response)
    
    locations = get_locations()
    return render_template('user.html', locations=locations)

@app.route('/check_price', methods=['POST'])
def check_price():
    location = request.form['location']
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor()
    cursor.execute("SELECT price FROM tickets WHERE location = %s", (location,))
    result = cursor.fetchone()
    cursor.close()
    conn.close()
    
    if result:
        return f"The ticket price for {location} is {result[0]} units."
    else:
        return "No price found for the selected location."

@app.route('/view_tickets', methods=['GET'])
def view_tickets():
    if 'username' not in session:
        return redirect(url_for('login'))
    
    username = session['username']
    conn = mysql.connector.connect(**db_config)
    cursor = conn.cursor(dictionary=True)
    cursor.execute("SELECT * FROM bookings WHERE username = %s", (username,))
    tickets = cursor.fetchall()
    cursor.close()
    conn.close()
    
    return render_template('view_tickets.html', tickets=tickets)



if __name__ == "__main__":
    app.run(debug=True)




get.py :-

import fitz
import requests
from bs4 import BeautifulSoup


def extract_pdf_text(pdf_file):
    text = ""
    try:
        doc = fitz.open(pdf_file)
        for page_num in range(len(doc)):
            page = doc.load_page(page_num)
            text += page.get_text()
        doc.close()
    except Exception as e:
        print(f"Error extracting text from PDF: {str(e)}")
    return text


def fetch_webpage_content(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            soup = BeautifulSoup(response.text, 'html.parser')
            paragraphs = soup.find_all('p')
            content = ' '.join([p.get_text() for p in paragraphs])
            return content
        else:
            return None
    except Exception as e:
        print(f"Error fetching webpage: {str(e)}")
        return None


admin_view_tickets.html :-
<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Booked Tickets</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>

<body class="bg-gray-900 text-gray-300">
    <div class="container mx-auto px-4 py-8">
        <h1 class="text-3xl font-bold text-center mb-6 text-pink-500">Booked Tickets</h1>
        <div class="bg-gray-800 p-6 rounded-lg shadow-md">
            <ul class="list-disc pl-5">
                {% for ticket in booked_tickets %}
                <li class="mb-2 text-gray-300">{{ ticket }}</li>
                {% endfor %}
            </ul>
        </div>
    </div>
</body>

</html>


admin.html:-

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Panel</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>

<body class="bg-gray-900 text-gray-300 flex items-center justify-center min-h-screen">
    <div class="bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-lg">
        <h2 class="text-2xl font-bold mb-6 text-center text-pink-500">Admin Panel</h2>
        <form method="POST" enctype="multipart/form-data" class="space-y-4">
            <div>
                <label for="location" class="block text-sm font-medium text-gray-400">Location:</label>
                <input type="text" id="location" name="location" required
                    class="mt-1 block w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-pink-500 focus:border-pink-500 sm:text-sm">
            </div>

            <div>
                <label for="tickets_available" class="block text-sm font-medium text-gray-400">Tickets Available:</label>
                <input type="number" id="tickets_available" name="tickets_available" required
                    class="mt-1 block w-full px-3 py-2 bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-pink-500 focus:border-pink-500 sm:text-sm">
            </div>

            <div>
                <label for="pdf" class="block text-sm font-medium text-gray-400">Upload File:</label>
                <input type="file" id="pdf" name="pdf"
                    class="mt-1 block w-full text-gray-300 bg-gray-700 border border-gray-600 rounded-md py-2 px-3 focus:outline-none focus:ring-pink-500 focus:border-pink-500 sm:text-sm">
            </div>

            <div>
                <button type="submit"
                    class="w-full py-2 px-4 bg-pink-600 text-white font-semibold rounded-md shadow-sm hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500">
                    Add Location
                </button>
            </div>
        </form>
        <div class="mt-4 text-center">
            <a href="{{ url_for('logout') }}" class="text-pink-500">Logout</a>
        </div>
    </div>
</body>

</html>



booked_tickets.html :-


<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Booked Tickets</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }

        th,
        td {
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #FF6F00;
            /* Orange theme for header background */
            color: #F9FAFB;
            /* Light text color for header */
        }

        td {
            background-color: #1F2937;
            /* Dark gray for rows */
            color: #D1D5DB;
            /* Light gray text color */
        }

        table tr:nth-child(even) {
            background-color: #374151;
            /* Slightly lighter gray for alternating rows */
        }

        table tr:hover {
            background-color: #4B5563;
            /* Highlight color on hover */
        }
    </style>
</head>

<body class="bg-gray-900 text-gray-300 flex items-center justify-center min-h-screen">
    <div class="container mx-auto p-6 bg-gray-800 rounded-lg shadow-lg w-full max-w-4xl">
        <h1 class="text-3xl font-bold mb-6 text-center text-pink-500">Booked Tickets</h1>
        <table class="min-w-full bg-gray-800 border border-gray-700 rounded-lg overflow-hidden">
            <thead class="bg-pink-500 text-white">
                <tr>
                    <th class="py-3 px-4 text-left text-sm font-semibold">Location</th>
                    <th class="py-3 px-4 text-left text-sm font-semibold">Username</th>
                    <th class="py-3 px-4 text-left text-sm font-semibold">Tickets Booked</th>
                </tr>
            </thead>
            <tbody>
                {% for ticket in tickets %}
                <tr class="hover:bg-gray-700">
                    <td class="py-2 px-4 border-b border-gray-700">{{ ticket.location }}</td>
                    <td class="py-2 px-4 border-b border-gray-700">{{ ticket.username }}</td>
                    <td class="py-2 px-4 border-b border-gray-700">{{ ticket.tickets_booked }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</body>

</html>


index.html:-

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Select Role</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
</head>

<body class="bg-gray-900 text-gray-300 flex items-center justify-center min-h-screen">
    <div class="bg-gray-800 p-8 rounded-lg shadow-lg w-full max-w-sm">
        <h2 class="text-2xl font-bold mb-6 text-center text-pink-500">
            Welcome! Please Select Your Role
        </h2>
        <form action="{{ url_for('index') }}" method="post" class="space-y-4">
            <div>
                <label for="user_type" class="block text-sm font-medium text-gray-400">Choose Role:</label>
                <select name="user_type" id="user_type"
                    class="mt-1 block w-full bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm">
                    <option value="admin">Admin</option>
                    <option value="user">User</option>
                </select>
            </div>
            <div>
                <button type="submit"
                    class="w-full py-2 px-4 bg-pink-600 text-white font-semibold rounded-md shadow-sm hover:bg-pink-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500">
                    Submit
                </button>
            </div>
        </form>
    </div>
</body>

</html>

user.html:-

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Page</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        .section {
            display: none;
        }

        .section.active {
            display: block;
        }
    </style>
</head>

<body class="bg-gray-900 text-gray-300">
    <!-- Navbar -->
    <nav class="w-full bg-gray-800 p-4 shadow-md">
        <div class="container mx-auto flex items-center justify-between">
            <a href="#" class="text-pink-500 text-2xl font-bold">MuseBot</a>
            <div class="space-x-4">
                <a href="#chatbot" onclick="showSection('chatbot')"
                    class="hover:bg-pink-600 px-4 py-2 rounded-md text-sm font-medium text-gray-300">Chatbot</a>
                <a href="#ticket-booking" onclick="showSection('ticket-booking')"
                    class="hover:bg-pink-600 px-4 py-2 rounded-md text-sm font-medium text-gray-300">Ticket Booking</a>
                <a href="{{ url_for('view_tickets') }}"
                    class="hover:bg-pink-600 px-4 py-2 rounded-md text-sm font-medium text-gray-300">View Booked
                    Tickets</a>
                <a href="{{ url_for('logout') }}"
                    class="hover:bg-pink-600 px-4 py-2 rounded-md text-sm font-medium text-gray-300">Logout</a>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="container mx-auto p-8 bg-gray-800 rounded-lg shadow-lg mt-4">
        <!-- Chatbot Section -->
        <div id="chatbot" class="section active">
            <h3 class="text-3xl font-semibold mb-6 text-pink-500 text-center">Chatbot</h3>
            <p class="mb-8 text-gray-300 text-center">Ask our chatbot any questions about your visit, bookings, or
                general inquiries. The chatbot is here to help you!</p>
            <div class="flex justify-center mb-6">
                <img src="https://via.placeholder.com/150" alt="Chatbot Image" class="rounded-lg shadow-md">
            </div>
            <form method="post" action="{{ url_for('user_page') }}" class="space-y-6 max-w-md mx-auto">
                <div class="flex flex-col">
                    <label for="location" class="block text-sm font-medium text-gray-300 mb-2">Select Location:</label>
                    <select id="location" name="location" required
                        class="bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm">
                        {% for location in locations %}
                        <option value="{{ location }}">{{ location }}</option>
                        {% endfor %}
                    </select>
                </div>

                <div class="flex flex-col">
                    <label for="chatbot-input" class="block text-sm font-medium text-gray-300 mb-2">Your
                        Question:</label>
                    <textarea id="chatbot-input" name="chatbot-input" rows="3" placeholder="Type your question here..."
                        required
                        class="bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm"></textarea>
                </div>

                <button type="submit"
                    class="bg-pink-500 text-white py-2 px-4 font-semibold rounded-md shadow-sm hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500">
                    Ask
                </button>
            </form>
            {% if chatbot_response %}
            <div id="chatbot-output" class="mt-8 p-4 bg-gray-700 border border-gray-600 rounded-md">
                <p class="text-gray-300"><strong>Chatbot:</strong> {{ chatbot_response|safe }}</p>
            </div>
            {% endif %}
        </div>

        <!-- Ticket Booking Section -->
        <div id="ticket-booking" class="section">
            <h3 class="text-3xl font-semibold mb-6 text-pink-500 text-center">Ticket Booking</h3>
            <p class="mb-8 text-gray-300 text-center">Book your tickets for upcoming events quickly and easily using our
                online booking system.</p>
            <div class="flex justify-center mb-6">
                <img src="https://via.placeholder.com/150" alt="Ticket Booking Image" class="rounded-lg shadow-md">
            </div>
            <form method="post" action="{{ url_for('user_page') }}" class="space-y-6 max-w-md mx-auto">
                <div class="flex flex-col">
                    <label for="username" class="block text-sm font-medium text-gray-300 mb-2">Your Name:</label>
                    <input type="text" id="username" name="username" required
                        class="bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm"
                        value="{{ session['username'] }}" readonly>
                </div>

                <div class="flex flex-col">
                    <label for="location-book" class="block text-sm font-medium text-gray-300 mb-2">Location:</label>
                    <select id="location-book" name="location" required
                        class="bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm">
                        {% for location in locations %}
                        <option value="{{ location }}">{{ location }}</option>
                        {% endfor %}
                    </select>
                </div>

                <div class="flex flex-col">
                    <label for="tickets" class="block text-sm font-medium text-gray-300 mb-2">Number of Tickets:</label>
                    <input type="number" id="tickets" name="tickets" min="1" required
                        class="bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm">
                </div>

                <button type="submit"
                    class="bg-pink-500 text-white py-2 px-4 font-semibold rounded-md shadow-sm hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500">
                    Book Ticket
                </button>
                {% if booking_response %}
                <div class="mt-4 p-4 bg-gray-700 border border-gray-600 rounded-md">
                    <p class="text-gray-300">{{ booking_response }}</p>
                </div>
                {% endif %}
            </form>
        </div>

        <!-- Search Location Section -->
        <div id="search-location" class="section">
            <h3 class="text-3xl font-semibold mb-6 text-pink-500 text-center">Search Location</h3>
            <p class="mb-8 text-gray-300 text-center">Find your desired location by searching below.</p>
            <form method="post" action="{{ url_for('user_page') }}" class="space-y-6 max-w-md mx-auto">
                <div class="flex flex-col">
                    <label for="search_query" class="block text-sm font-medium text-gray-300 mb-2">Search Location:</label>
                    <input type="text" id="search_query" name="search_query" placeholder="Type to search locations..."
                        class="bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm">
                </div>
                <button type="submit"
                    class="bg-pink-500 text-white py-2 px-4 font-semibold rounded-md shadow-sm hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500">
                    Search
                </button>
            </form>
            {% if search_results is defined %}
            <div class="mt-8 p-4 bg-gray-700 border border-gray-600 rounded-md">
                {% if search_results %}
                <h4 class="text-xl font-semibold text-gray-300 mb-2">Search Results:</h4>
                <ul class="list-disc list-inside text-gray-300">
                    {% for location in search_results %}
                    <li>{{ location }}</li>
                    {% endfor %}
                </ul>
                {% else %}
                <p class="text-gray-300">No locations found matching your search.</p>
                {% endif %}
            </div>
            {% endif %}
        </div>

        <!-- Price Check Section -->
        <div id="price-check" class="section">
            <h3 class="text-3xl font-semibold mb-6 text-pink-500 text-center">Check Ticket Price</h3>
            <p class="mb-8 text-gray-300 text-center">Find out the price of tickets for different locations.</p>
            <form method="post" action="{{ url_for('check_price') }}" class="space-y-6 max-w-md mx-auto">
                <div class="flex flex-col">
                    <label for="location-price" class="block text-sm font-medium text-gray-300 mb-2">Location:</label>
                    <select id="location-price" name="location" required
                        class="bg-gray-700 border border-gray-600 rounded-md shadow-sm focus:ring-pink-500 focus:border-pink-500 sm:text-sm">
                        {% for location in locations %}
                        <option value="{{ location }}">{{ location }}</option>
                        {% endfor %}
                    </select>
                </div>
                <button type="submit"
                    class="bg-pink-500 text-white py-2 px-4 font-semibold rounded-md shadow-sm hover:bg-pink-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-pink-500">
                    Check Price
                </button>
            </form>
            {% if price_response %}
            <div class="mt-8 p-4 bg-gray-700 border border-gray-600 rounded-md">
                <p class="text-gray-300">{{ price_response }}</p>
            </div>
            {% endif %}
        </div>
    </div>

    <script>
        function showSection(sectionId) {
            document.querySelectorAll('.section').forEach(function (section) {
                section.classList.remove('active');
            });
            document.getElementById(sectionId).classList.add('active');
        }

        // Optionally, you can set the default active section here
        document.addEventListener("DOMContentLoaded", function () {
            // By default, show the Chatbot section
            showSection('chatbot');
        });
    </script>
</body>

</html>


view_tickets:-

<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Booked Tickets</title>
    <link href="https://cdn.jsdelivr.net/npm/tailwindcss@2.2.19/dist/tailwind.min.css" rel="stylesheet">
    <style>
        table {
            border-collapse: collapse;
            width: 100%;
        }

        th,
        td {
            padding: 8px;
            text-align: left;
        }

        th {
            background-color: #1F2937;
            /* Darker gray for header background */
            color: #F9FAFB;
            /* Light text color for header */
        }

        td {
            background-color: #374151;
            /* Slightly lighter gray for rows */
            color: #D1D5DB;
            /* Light gray text color */
        }

        table tr:nth-child(even) {
            background-color: #4B5563;
            /* Alternating row color for better readability */
        }

        table tr:hover {
            background-color: #6B7280;
            /* Highlight color on hover */
        }
    </style>
</head>

<body class="bg-gray-900 text-gray-300 p-8">
    <div class="container mx-auto">
        <h1 class="text-3xl font-bold mb-6 text-center text-pink-500">Booked Tickets</h1>
        <table class="border border-gray-700 rounded-lg shadow-md">
            <thead>
                <tr>
                    <th>Location</th>
                    <th>PDF Path</th>
                    <th>Tickets Available</th>
                </tr>
            </thead>
            <tbody>
                {% for ticket in tickets %}
                <tr>
                    <td>{{ ticket.location }}</td>
                    <td>{{ ticket.pdf_path }}</td>
                    <td>{{ ticket.tickets_available }}</td>
                </tr>
                {% endfor %}
            </tbody>
        </table>
    </div>
</body>

</html>

script.js :-

function showSection(sectionId) {
    var sections = document.querySelectorAll('.section');
    sections.forEach(function(section) {
        section.classList.remove('active');
    });
    document.getElementById(sectionId).classList.add('active');
}

// Show the first section by default (e.g., Chatbot section)
document.addEventListener("DOMContentLoaded", function() {
    showSection('chatbot');
});

style.css:-

body {
    font-family: Arial, sans-serif;
    background-color: #f4f4f4;
    margin: 0;
    padding: 0;
}

.container {
    width: 80%;
    margin: auto;
    overflow: hidden;
}

h2 {
    color: #333;
    text-align: center;
    margin-top: 20px;
}

nav {
    display: flex;
    justify-content: center;
    margin-bottom: 20px;
}

nav a {
    margin: 0 15px;
    padding: 10px 20px;
    text-decoration: none;
    color: white;
    background-color: #007BFF;
    border-radius: 5px;
}

nav a:hover {
    background-color: #0056b3;
}

.section {
    display: none;
}

.section.active {
    display: block;
}

.hidden {
    display: none;
}

button {
    background-color: #4CAF50;
    color: white;
    padding: 10px 20px;
    border: none;
    cursor: pointer;
}

button:hover {
    background-color: #45a049;
}

table {
    width: 100%;
    border-collapse: collapse;
    margin-top: 20px;
}

table, th, td {
    border: 1px solid #ddd;
    padding: 8px;
}

th {
    background-color: #f2f2f2;
    text-align: left;
}
